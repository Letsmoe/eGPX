// source: schemas/v1.1/eGPX.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.exportSymbol('proto.eGPX.Author', null, global);
goog.exportSymbol('proto.eGPX.Bounds', null, global);
goog.exportSymbol('proto.eGPX.Copyright', null, global);
goog.exportSymbol('proto.eGPX.Distance', null, global);
goog.exportSymbol('proto.eGPX.Elevation', null, global);
goog.exportSymbol('proto.eGPX.Email', null, global);
goog.exportSymbol('proto.eGPX.File', null, global);
goog.exportSymbol('proto.eGPX.Link', null, global);
goog.exportSymbol('proto.eGPX.Metadata', null, global);
goog.exportSymbol('proto.eGPX.Point', null, global);
goog.exportSymbol('proto.eGPX.Route', null, global);
goog.exportSymbol('proto.eGPX.Track', null, global);
goog.exportSymbol('proto.eGPX.TrackSegment', null, global);
goog.exportSymbol('proto.eGPX.Waypoint', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eGPX.File = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.eGPX.File.repeatedFields_, null);
};
goog.inherits(proto.eGPX.File, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eGPX.File.displayName = 'proto.eGPX.File';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eGPX.Link = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.eGPX.Link, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eGPX.Link.displayName = 'proto.eGPX.Link';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eGPX.Waypoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.eGPX.Waypoint.repeatedFields_, null);
};
goog.inherits(proto.eGPX.Waypoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eGPX.Waypoint.displayName = 'proto.eGPX.Waypoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eGPX.Route = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.eGPX.Route.repeatedFields_, null);
};
goog.inherits(proto.eGPX.Route, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eGPX.Route.displayName = 'proto.eGPX.Route';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eGPX.Track = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.eGPX.Track.repeatedFields_, null);
};
goog.inherits(proto.eGPX.Track, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eGPX.Track.displayName = 'proto.eGPX.Track';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eGPX.TrackSegment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.eGPX.TrackSegment.repeatedFields_, null);
};
goog.inherits(proto.eGPX.TrackSegment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eGPX.TrackSegment.displayName = 'proto.eGPX.TrackSegment';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eGPX.Elevation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.eGPX.Elevation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eGPX.Elevation.displayName = 'proto.eGPX.Elevation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eGPX.Distance = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.eGPX.Distance, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eGPX.Distance.displayName = 'proto.eGPX.Distance';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eGPX.Point = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.eGPX.Point, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eGPX.Point.displayName = 'proto.eGPX.Point';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eGPX.Metadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.eGPX.Metadata.repeatedFields_, null);
};
goog.inherits(proto.eGPX.Metadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eGPX.Metadata.displayName = 'proto.eGPX.Metadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eGPX.Copyright = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.eGPX.Copyright, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eGPX.Copyright.displayName = 'proto.eGPX.Copyright';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eGPX.Author = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.eGPX.Author, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eGPX.Author.displayName = 'proto.eGPX.Author';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eGPX.Email = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.eGPX.Email, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eGPX.Email.displayName = 'proto.eGPX.Email';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eGPX.Bounds = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.eGPX.Bounds, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eGPX.Bounds.displayName = 'proto.eGPX.Bounds';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.eGPX.File.repeatedFields_ = [4,5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eGPX.File.prototype.toObject = function(opt_includeInstance) {
  return proto.eGPX.File.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eGPX.File} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eGPX.File.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, ""),
    creator: jspb.Message.getFieldWithDefault(msg, 2, ""),
    metadata: (f = msg.getMetadata()) && proto.eGPX.Metadata.toObject(includeInstance, f),
    wptList: jspb.Message.toObjectList(msg.getWptList(),
    proto.eGPX.Waypoint.toObject, includeInstance),
    trkList: jspb.Message.toObjectList(msg.getTrkList(),
    proto.eGPX.Track.toObject, includeInstance),
    rteList: jspb.Message.toObjectList(msg.getRteList(),
    proto.eGPX.Route.toObject, includeInstance),
    extensionsMap: (f = msg.getExtensionsMap()) ? f.toObject(includeInstance, proto.google.protobuf.Any.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eGPX.File}
 */
proto.eGPX.File.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eGPX.File;
  return proto.eGPX.File.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eGPX.File} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eGPX.File}
 */
proto.eGPX.File.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreator(value);
      break;
    case 3:
      var value = new proto.eGPX.Metadata;
      reader.readMessage(value,proto.eGPX.Metadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 4:
      var value = new proto.eGPX.Waypoint;
      reader.readMessage(value,proto.eGPX.Waypoint.deserializeBinaryFromReader);
      msg.addWpt(value);
      break;
    case 5:
      var value = new proto.eGPX.Track;
      reader.readMessage(value,proto.eGPX.Track.deserializeBinaryFromReader);
      msg.addTrk(value);
      break;
    case 6:
      var value = new proto.eGPX.Route;
      reader.readMessage(value,proto.eGPX.Route.deserializeBinaryFromReader);
      msg.addRte(value);
      break;
    case 7:
      var value = msg.getExtensionsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.google.protobuf.Any.deserializeBinaryFromReader, "", new proto.google.protobuf.Any());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eGPX.File.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eGPX.File.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eGPX.File} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eGPX.File.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCreator();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.eGPX.Metadata.serializeBinaryToWriter
    );
  }
  f = message.getWptList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.eGPX.Waypoint.serializeBinaryToWriter
    );
  }
  f = message.getTrkList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.eGPX.Track.serializeBinaryToWriter
    );
  }
  f = message.getRteList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.eGPX.Route.serializeBinaryToWriter
    );
  }
  f = message.getExtensionsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(7, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.google.protobuf.Any.serializeBinaryToWriter);
  }
};


/**
 * optional string version = 1;
 * @return {string}
 */
proto.eGPX.File.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.eGPX.File} returns this
 */
proto.eGPX.File.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string creator = 2;
 * @return {string}
 */
proto.eGPX.File.prototype.getCreator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.eGPX.File} returns this
 */
proto.eGPX.File.prototype.setCreator = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Metadata metadata = 3;
 * @return {?proto.eGPX.Metadata}
 */
proto.eGPX.File.prototype.getMetadata = function() {
  return /** @type{?proto.eGPX.Metadata} */ (
    jspb.Message.getWrapperField(this, proto.eGPX.Metadata, 3));
};


/**
 * @param {?proto.eGPX.Metadata|undefined} value
 * @return {!proto.eGPX.File} returns this
*/
proto.eGPX.File.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.eGPX.File} returns this
 */
proto.eGPX.File.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.eGPX.File.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated Waypoint wpt = 4;
 * @return {!Array<!proto.eGPX.Waypoint>}
 */
proto.eGPX.File.prototype.getWptList = function() {
  return /** @type{!Array<!proto.eGPX.Waypoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.eGPX.Waypoint, 4));
};


/**
 * @param {!Array<!proto.eGPX.Waypoint>} value
 * @return {!proto.eGPX.File} returns this
*/
proto.eGPX.File.prototype.setWptList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.eGPX.Waypoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.eGPX.Waypoint}
 */
proto.eGPX.File.prototype.addWpt = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.eGPX.Waypoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.eGPX.File} returns this
 */
proto.eGPX.File.prototype.clearWptList = function() {
  return this.setWptList([]);
};


/**
 * repeated Track trk = 5;
 * @return {!Array<!proto.eGPX.Track>}
 */
proto.eGPX.File.prototype.getTrkList = function() {
  return /** @type{!Array<!proto.eGPX.Track>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.eGPX.Track, 5));
};


/**
 * @param {!Array<!proto.eGPX.Track>} value
 * @return {!proto.eGPX.File} returns this
*/
proto.eGPX.File.prototype.setTrkList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.eGPX.Track=} opt_value
 * @param {number=} opt_index
 * @return {!proto.eGPX.Track}
 */
proto.eGPX.File.prototype.addTrk = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.eGPX.Track, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.eGPX.File} returns this
 */
proto.eGPX.File.prototype.clearTrkList = function() {
  return this.setTrkList([]);
};


/**
 * repeated Route rte = 6;
 * @return {!Array<!proto.eGPX.Route>}
 */
proto.eGPX.File.prototype.getRteList = function() {
  return /** @type{!Array<!proto.eGPX.Route>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.eGPX.Route, 6));
};


/**
 * @param {!Array<!proto.eGPX.Route>} value
 * @return {!proto.eGPX.File} returns this
*/
proto.eGPX.File.prototype.setRteList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.eGPX.Route=} opt_value
 * @param {number=} opt_index
 * @return {!proto.eGPX.Route}
 */
proto.eGPX.File.prototype.addRte = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.eGPX.Route, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.eGPX.File} returns this
 */
proto.eGPX.File.prototype.clearRteList = function() {
  return this.setRteList([]);
};


/**
 * map<string, google.protobuf.Any> extensions = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.google.protobuf.Any>}
 */
proto.eGPX.File.prototype.getExtensionsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.google.protobuf.Any>} */ (
      jspb.Message.getMapField(this, 7, opt_noLazyCreate,
      proto.google.protobuf.Any));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.eGPX.File} returns this
 */
proto.eGPX.File.prototype.clearExtensionsMap = function() {
  this.getExtensionsMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eGPX.Link.prototype.toObject = function(opt_includeInstance) {
  return proto.eGPX.Link.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eGPX.Link} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eGPX.Link.toObject = function(includeInstance, msg) {
  var f, obj = {
    href: jspb.Message.getFieldWithDefault(msg, 1, ""),
    text: jspb.Message.getFieldWithDefault(msg, 2, ""),
    type: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eGPX.Link}
 */
proto.eGPX.Link.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eGPX.Link;
  return proto.eGPX.Link.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eGPX.Link} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eGPX.Link}
 */
proto.eGPX.Link.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHref(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eGPX.Link.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eGPX.Link.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eGPX.Link} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eGPX.Link.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHref();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string href = 1;
 * @return {string}
 */
proto.eGPX.Link.prototype.getHref = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.eGPX.Link} returns this
 */
proto.eGPX.Link.prototype.setHref = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string text = 2;
 * @return {string}
 */
proto.eGPX.Link.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.eGPX.Link} returns this
 */
proto.eGPX.Link.prototype.setText = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string type = 3;
 * @return {string}
 */
proto.eGPX.Link.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.eGPX.Link} returns this
 */
proto.eGPX.Link.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.eGPX.Waypoint.repeatedFields_ = [11];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eGPX.Waypoint.prototype.toObject = function(opt_includeInstance) {
  return proto.eGPX.Waypoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eGPX.Waypoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eGPX.Waypoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    lat: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    lon: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    ele: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    time: jspb.Message.getFieldWithDefault(msg, 4, 0),
    magvar: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    geoidheight: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    name: jspb.Message.getFieldWithDefault(msg, 7, ""),
    cmt: jspb.Message.getFieldWithDefault(msg, 8, ""),
    desc: jspb.Message.getFieldWithDefault(msg, 9, ""),
    src: jspb.Message.getFieldWithDefault(msg, 10, ""),
    linkList: jspb.Message.toObjectList(msg.getLinkList(),
    proto.eGPX.Link.toObject, includeInstance),
    sym: jspb.Message.getFieldWithDefault(msg, 12, ""),
    type: jspb.Message.getFieldWithDefault(msg, 13, ""),
    fix: jspb.Message.getFieldWithDefault(msg, 14, ""),
    sat: jspb.Message.getFieldWithDefault(msg, 15, 0),
    hdop: jspb.Message.getFloatingPointFieldWithDefault(msg, 16, 0.0),
    vdop: jspb.Message.getFloatingPointFieldWithDefault(msg, 17, 0.0),
    pdop: jspb.Message.getFloatingPointFieldWithDefault(msg, 18, 0.0),
    ageofdgpsdata: jspb.Message.getFloatingPointFieldWithDefault(msg, 19, 0.0),
    dgpsid: jspb.Message.getFieldWithDefault(msg, 20, 0),
    extensionsMap: (f = msg.getExtensionsMap()) ? f.toObject(includeInstance, proto.google.protobuf.Any.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eGPX.Waypoint}
 */
proto.eGPX.Waypoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eGPX.Waypoint;
  return proto.eGPX.Waypoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eGPX.Waypoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eGPX.Waypoint}
 */
proto.eGPX.Waypoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLat(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLon(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setEle(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTime(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMagvar(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setGeoidheight(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setCmt(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setDesc(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setSrc(value);
      break;
    case 11:
      var value = new proto.eGPX.Link;
      reader.readMessage(value,proto.eGPX.Link.deserializeBinaryFromReader);
      msg.addLink(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setSym(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setFix(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSat(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHdop(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVdop(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPdop(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAgeofdgpsdata(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDgpsid(value);
      break;
    case 21:
      var value = msg.getExtensionsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.google.protobuf.Any.deserializeBinaryFromReader, "", new proto.google.protobuf.Any());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eGPX.Waypoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eGPX.Waypoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eGPX.Waypoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eGPX.Waypoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLat();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getLon();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getEle();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getTime();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getMagvar();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getGeoidheight();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getCmt();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getDesc();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getSrc();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getLinkList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.eGPX.Link.serializeBinaryToWriter
    );
  }
  f = message.getSym();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getFix();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getSat();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = message.getHdop();
  if (f !== 0.0) {
    writer.writeFloat(
      16,
      f
    );
  }
  f = message.getVdop();
  if (f !== 0.0) {
    writer.writeFloat(
      17,
      f
    );
  }
  f = message.getPdop();
  if (f !== 0.0) {
    writer.writeFloat(
      18,
      f
    );
  }
  f = message.getAgeofdgpsdata();
  if (f !== 0.0) {
    writer.writeFloat(
      19,
      f
    );
  }
  f = message.getDgpsid();
  if (f !== 0) {
    writer.writeInt32(
      20,
      f
    );
  }
  f = message.getExtensionsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(21, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.google.protobuf.Any.serializeBinaryToWriter);
  }
};


/**
 * optional float lat = 1;
 * @return {number}
 */
proto.eGPX.Waypoint.prototype.getLat = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.eGPX.Waypoint} returns this
 */
proto.eGPX.Waypoint.prototype.setLat = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float lon = 2;
 * @return {number}
 */
proto.eGPX.Waypoint.prototype.getLon = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.eGPX.Waypoint} returns this
 */
proto.eGPX.Waypoint.prototype.setLon = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float ele = 3;
 * @return {number}
 */
proto.eGPX.Waypoint.prototype.getEle = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.eGPX.Waypoint} returns this
 */
proto.eGPX.Waypoint.prototype.setEle = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional int64 time = 4;
 * @return {number}
 */
proto.eGPX.Waypoint.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.eGPX.Waypoint} returns this
 */
proto.eGPX.Waypoint.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional float magvar = 5;
 * @return {number}
 */
proto.eGPX.Waypoint.prototype.getMagvar = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.eGPX.Waypoint} returns this
 */
proto.eGPX.Waypoint.prototype.setMagvar = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional float geoidheight = 6;
 * @return {number}
 */
proto.eGPX.Waypoint.prototype.getGeoidheight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.eGPX.Waypoint} returns this
 */
proto.eGPX.Waypoint.prototype.setGeoidheight = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional string name = 7;
 * @return {string}
 */
proto.eGPX.Waypoint.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.eGPX.Waypoint} returns this
 */
proto.eGPX.Waypoint.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string cmt = 8;
 * @return {string}
 */
proto.eGPX.Waypoint.prototype.getCmt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.eGPX.Waypoint} returns this
 */
proto.eGPX.Waypoint.prototype.setCmt = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string desc = 9;
 * @return {string}
 */
proto.eGPX.Waypoint.prototype.getDesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.eGPX.Waypoint} returns this
 */
proto.eGPX.Waypoint.prototype.setDesc = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string src = 10;
 * @return {string}
 */
proto.eGPX.Waypoint.prototype.getSrc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.eGPX.Waypoint} returns this
 */
proto.eGPX.Waypoint.prototype.setSrc = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * repeated Link link = 11;
 * @return {!Array<!proto.eGPX.Link>}
 */
proto.eGPX.Waypoint.prototype.getLinkList = function() {
  return /** @type{!Array<!proto.eGPX.Link>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.eGPX.Link, 11));
};


/**
 * @param {!Array<!proto.eGPX.Link>} value
 * @return {!proto.eGPX.Waypoint} returns this
*/
proto.eGPX.Waypoint.prototype.setLinkList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.eGPX.Link=} opt_value
 * @param {number=} opt_index
 * @return {!proto.eGPX.Link}
 */
proto.eGPX.Waypoint.prototype.addLink = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.eGPX.Link, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.eGPX.Waypoint} returns this
 */
proto.eGPX.Waypoint.prototype.clearLinkList = function() {
  return this.setLinkList([]);
};


/**
 * optional string sym = 12;
 * @return {string}
 */
proto.eGPX.Waypoint.prototype.getSym = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.eGPX.Waypoint} returns this
 */
proto.eGPX.Waypoint.prototype.setSym = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string type = 13;
 * @return {string}
 */
proto.eGPX.Waypoint.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.eGPX.Waypoint} returns this
 */
proto.eGPX.Waypoint.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string fix = 14;
 * @return {string}
 */
proto.eGPX.Waypoint.prototype.getFix = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.eGPX.Waypoint} returns this
 */
proto.eGPX.Waypoint.prototype.setFix = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional int32 sat = 15;
 * @return {number}
 */
proto.eGPX.Waypoint.prototype.getSat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.eGPX.Waypoint} returns this
 */
proto.eGPX.Waypoint.prototype.setSat = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional float hdop = 16;
 * @return {number}
 */
proto.eGPX.Waypoint.prototype.getHdop = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 16, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.eGPX.Waypoint} returns this
 */
proto.eGPX.Waypoint.prototype.setHdop = function(value) {
  return jspb.Message.setProto3FloatField(this, 16, value);
};


/**
 * optional float vdop = 17;
 * @return {number}
 */
proto.eGPX.Waypoint.prototype.getVdop = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 17, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.eGPX.Waypoint} returns this
 */
proto.eGPX.Waypoint.prototype.setVdop = function(value) {
  return jspb.Message.setProto3FloatField(this, 17, value);
};


/**
 * optional float pdop = 18;
 * @return {number}
 */
proto.eGPX.Waypoint.prototype.getPdop = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 18, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.eGPX.Waypoint} returns this
 */
proto.eGPX.Waypoint.prototype.setPdop = function(value) {
  return jspb.Message.setProto3FloatField(this, 18, value);
};


/**
 * optional float ageofdgpsdata = 19;
 * @return {number}
 */
proto.eGPX.Waypoint.prototype.getAgeofdgpsdata = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 19, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.eGPX.Waypoint} returns this
 */
proto.eGPX.Waypoint.prototype.setAgeofdgpsdata = function(value) {
  return jspb.Message.setProto3FloatField(this, 19, value);
};


/**
 * optional int32 dgpsid = 20;
 * @return {number}
 */
proto.eGPX.Waypoint.prototype.getDgpsid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {number} value
 * @return {!proto.eGPX.Waypoint} returns this
 */
proto.eGPX.Waypoint.prototype.setDgpsid = function(value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};


/**
 * map<string, google.protobuf.Any> extensions = 21;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.google.protobuf.Any>}
 */
proto.eGPX.Waypoint.prototype.getExtensionsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.google.protobuf.Any>} */ (
      jspb.Message.getMapField(this, 21, opt_noLazyCreate,
      proto.google.protobuf.Any));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.eGPX.Waypoint} returns this
 */
proto.eGPX.Waypoint.prototype.clearExtensionsMap = function() {
  this.getExtensionsMap().clear();
  return this;};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.eGPX.Route.repeatedFields_ = [5,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eGPX.Route.prototype.toObject = function(opt_includeInstance) {
  return proto.eGPX.Route.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eGPX.Route} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eGPX.Route.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    cmt: jspb.Message.getFieldWithDefault(msg, 2, ""),
    desc: jspb.Message.getFieldWithDefault(msg, 3, ""),
    src: jspb.Message.getFieldWithDefault(msg, 4, ""),
    linkList: jspb.Message.toObjectList(msg.getLinkList(),
    proto.eGPX.Link.toObject, includeInstance),
    number: jspb.Message.getFieldWithDefault(msg, 6, 0),
    type: jspb.Message.getFieldWithDefault(msg, 7, ""),
    extensionsMap: (f = msg.getExtensionsMap()) ? f.toObject(includeInstance, proto.google.protobuf.Any.toObject) : [],
    rteptList: jspb.Message.toObjectList(msg.getRteptList(),
    proto.eGPX.Waypoint.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eGPX.Route}
 */
proto.eGPX.Route.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eGPX.Route;
  return proto.eGPX.Route.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eGPX.Route} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eGPX.Route}
 */
proto.eGPX.Route.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCmt(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDesc(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSrc(value);
      break;
    case 5:
      var value = new proto.eGPX.Link;
      reader.readMessage(value,proto.eGPX.Link.deserializeBinaryFromReader);
      msg.addLink(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumber(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 8:
      var value = msg.getExtensionsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.google.protobuf.Any.deserializeBinaryFromReader, "", new proto.google.protobuf.Any());
         });
      break;
    case 9:
      var value = new proto.eGPX.Waypoint;
      reader.readMessage(value,proto.eGPX.Waypoint.deserializeBinaryFromReader);
      msg.addRtept(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eGPX.Route.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eGPX.Route.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eGPX.Route} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eGPX.Route.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCmt();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDesc();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSrc();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getLinkList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.eGPX.Link.serializeBinaryToWriter
    );
  }
  f = message.getNumber();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getExtensionsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(8, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.google.protobuf.Any.serializeBinaryToWriter);
  }
  f = message.getRteptList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.eGPX.Waypoint.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.eGPX.Route.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.eGPX.Route} returns this
 */
proto.eGPX.Route.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string cmt = 2;
 * @return {string}
 */
proto.eGPX.Route.prototype.getCmt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.eGPX.Route} returns this
 */
proto.eGPX.Route.prototype.setCmt = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string desc = 3;
 * @return {string}
 */
proto.eGPX.Route.prototype.getDesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.eGPX.Route} returns this
 */
proto.eGPX.Route.prototype.setDesc = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string src = 4;
 * @return {string}
 */
proto.eGPX.Route.prototype.getSrc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.eGPX.Route} returns this
 */
proto.eGPX.Route.prototype.setSrc = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated Link link = 5;
 * @return {!Array<!proto.eGPX.Link>}
 */
proto.eGPX.Route.prototype.getLinkList = function() {
  return /** @type{!Array<!proto.eGPX.Link>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.eGPX.Link, 5));
};


/**
 * @param {!Array<!proto.eGPX.Link>} value
 * @return {!proto.eGPX.Route} returns this
*/
proto.eGPX.Route.prototype.setLinkList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.eGPX.Link=} opt_value
 * @param {number=} opt_index
 * @return {!proto.eGPX.Link}
 */
proto.eGPX.Route.prototype.addLink = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.eGPX.Link, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.eGPX.Route} returns this
 */
proto.eGPX.Route.prototype.clearLinkList = function() {
  return this.setLinkList([]);
};


/**
 * optional int32 number = 6;
 * @return {number}
 */
proto.eGPX.Route.prototype.getNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.eGPX.Route} returns this
 */
proto.eGPX.Route.prototype.setNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string type = 7;
 * @return {string}
 */
proto.eGPX.Route.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.eGPX.Route} returns this
 */
proto.eGPX.Route.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * map<string, google.protobuf.Any> extensions = 8;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.google.protobuf.Any>}
 */
proto.eGPX.Route.prototype.getExtensionsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.google.protobuf.Any>} */ (
      jspb.Message.getMapField(this, 8, opt_noLazyCreate,
      proto.google.protobuf.Any));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.eGPX.Route} returns this
 */
proto.eGPX.Route.prototype.clearExtensionsMap = function() {
  this.getExtensionsMap().clear();
  return this;};


/**
 * repeated Waypoint rtept = 9;
 * @return {!Array<!proto.eGPX.Waypoint>}
 */
proto.eGPX.Route.prototype.getRteptList = function() {
  return /** @type{!Array<!proto.eGPX.Waypoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.eGPX.Waypoint, 9));
};


/**
 * @param {!Array<!proto.eGPX.Waypoint>} value
 * @return {!proto.eGPX.Route} returns this
*/
proto.eGPX.Route.prototype.setRteptList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.eGPX.Waypoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.eGPX.Waypoint}
 */
proto.eGPX.Route.prototype.addRtept = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.eGPX.Waypoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.eGPX.Route} returns this
 */
proto.eGPX.Route.prototype.clearRteptList = function() {
  return this.setRteptList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.eGPX.Track.repeatedFields_ = [5,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eGPX.Track.prototype.toObject = function(opt_includeInstance) {
  return proto.eGPX.Track.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eGPX.Track} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eGPX.Track.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    cmt: jspb.Message.getFieldWithDefault(msg, 2, ""),
    desc: jspb.Message.getFieldWithDefault(msg, 3, ""),
    src: jspb.Message.getFieldWithDefault(msg, 4, ""),
    linkList: jspb.Message.toObjectList(msg.getLinkList(),
    proto.eGPX.Link.toObject, includeInstance),
    number: jspb.Message.getFieldWithDefault(msg, 6, 0),
    type: jspb.Message.getFieldWithDefault(msg, 7, ""),
    extensionsMap: (f = msg.getExtensionsMap()) ? f.toObject(includeInstance, proto.google.protobuf.Any.toObject) : [],
    trksegList: jspb.Message.toObjectList(msg.getTrksegList(),
    proto.eGPX.TrackSegment.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eGPX.Track}
 */
proto.eGPX.Track.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eGPX.Track;
  return proto.eGPX.Track.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eGPX.Track} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eGPX.Track}
 */
proto.eGPX.Track.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCmt(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDesc(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSrc(value);
      break;
    case 5:
      var value = new proto.eGPX.Link;
      reader.readMessage(value,proto.eGPX.Link.deserializeBinaryFromReader);
      msg.addLink(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumber(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 8:
      var value = msg.getExtensionsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.google.protobuf.Any.deserializeBinaryFromReader, "", new proto.google.protobuf.Any());
         });
      break;
    case 9:
      var value = new proto.eGPX.TrackSegment;
      reader.readMessage(value,proto.eGPX.TrackSegment.deserializeBinaryFromReader);
      msg.addTrkseg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eGPX.Track.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eGPX.Track.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eGPX.Track} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eGPX.Track.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCmt();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDesc();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSrc();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getLinkList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.eGPX.Link.serializeBinaryToWriter
    );
  }
  f = message.getNumber();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getExtensionsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(8, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.google.protobuf.Any.serializeBinaryToWriter);
  }
  f = message.getTrksegList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.eGPX.TrackSegment.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.eGPX.Track.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.eGPX.Track} returns this
 */
proto.eGPX.Track.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string cmt = 2;
 * @return {string}
 */
proto.eGPX.Track.prototype.getCmt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.eGPX.Track} returns this
 */
proto.eGPX.Track.prototype.setCmt = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string desc = 3;
 * @return {string}
 */
proto.eGPX.Track.prototype.getDesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.eGPX.Track} returns this
 */
proto.eGPX.Track.prototype.setDesc = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string src = 4;
 * @return {string}
 */
proto.eGPX.Track.prototype.getSrc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.eGPX.Track} returns this
 */
proto.eGPX.Track.prototype.setSrc = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated Link link = 5;
 * @return {!Array<!proto.eGPX.Link>}
 */
proto.eGPX.Track.prototype.getLinkList = function() {
  return /** @type{!Array<!proto.eGPX.Link>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.eGPX.Link, 5));
};


/**
 * @param {!Array<!proto.eGPX.Link>} value
 * @return {!proto.eGPX.Track} returns this
*/
proto.eGPX.Track.prototype.setLinkList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.eGPX.Link=} opt_value
 * @param {number=} opt_index
 * @return {!proto.eGPX.Link}
 */
proto.eGPX.Track.prototype.addLink = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.eGPX.Link, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.eGPX.Track} returns this
 */
proto.eGPX.Track.prototype.clearLinkList = function() {
  return this.setLinkList([]);
};


/**
 * optional int32 number = 6;
 * @return {number}
 */
proto.eGPX.Track.prototype.getNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.eGPX.Track} returns this
 */
proto.eGPX.Track.prototype.setNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string type = 7;
 * @return {string}
 */
proto.eGPX.Track.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.eGPX.Track} returns this
 */
proto.eGPX.Track.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * map<string, google.protobuf.Any> extensions = 8;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.google.protobuf.Any>}
 */
proto.eGPX.Track.prototype.getExtensionsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.google.protobuf.Any>} */ (
      jspb.Message.getMapField(this, 8, opt_noLazyCreate,
      proto.google.protobuf.Any));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.eGPX.Track} returns this
 */
proto.eGPX.Track.prototype.clearExtensionsMap = function() {
  this.getExtensionsMap().clear();
  return this;};


/**
 * repeated TrackSegment trkseg = 9;
 * @return {!Array<!proto.eGPX.TrackSegment>}
 */
proto.eGPX.Track.prototype.getTrksegList = function() {
  return /** @type{!Array<!proto.eGPX.TrackSegment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.eGPX.TrackSegment, 9));
};


/**
 * @param {!Array<!proto.eGPX.TrackSegment>} value
 * @return {!proto.eGPX.Track} returns this
*/
proto.eGPX.Track.prototype.setTrksegList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.eGPX.TrackSegment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.eGPX.TrackSegment}
 */
proto.eGPX.Track.prototype.addTrkseg = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.eGPX.TrackSegment, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.eGPX.Track} returns this
 */
proto.eGPX.Track.prototype.clearTrksegList = function() {
  return this.setTrksegList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.eGPX.TrackSegment.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eGPX.TrackSegment.prototype.toObject = function(opt_includeInstance) {
  return proto.eGPX.TrackSegment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eGPX.TrackSegment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eGPX.TrackSegment.toObject = function(includeInstance, msg) {
  var f, obj = {
    trkptList: jspb.Message.toObjectList(msg.getTrkptList(),
    proto.eGPX.Waypoint.toObject, includeInstance),
    extensionsMap: (f = msg.getExtensionsMap()) ? f.toObject(includeInstance, proto.google.protobuf.Any.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eGPX.TrackSegment}
 */
proto.eGPX.TrackSegment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eGPX.TrackSegment;
  return proto.eGPX.TrackSegment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eGPX.TrackSegment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eGPX.TrackSegment}
 */
proto.eGPX.TrackSegment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.eGPX.Waypoint;
      reader.readMessage(value,proto.eGPX.Waypoint.deserializeBinaryFromReader);
      msg.addTrkpt(value);
      break;
    case 2:
      var value = msg.getExtensionsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.google.protobuf.Any.deserializeBinaryFromReader, "", new proto.google.protobuf.Any());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eGPX.TrackSegment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eGPX.TrackSegment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eGPX.TrackSegment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eGPX.TrackSegment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTrkptList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.eGPX.Waypoint.serializeBinaryToWriter
    );
  }
  f = message.getExtensionsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.google.protobuf.Any.serializeBinaryToWriter);
  }
};


/**
 * repeated Waypoint trkpt = 1;
 * @return {!Array<!proto.eGPX.Waypoint>}
 */
proto.eGPX.TrackSegment.prototype.getTrkptList = function() {
  return /** @type{!Array<!proto.eGPX.Waypoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.eGPX.Waypoint, 1));
};


/**
 * @param {!Array<!proto.eGPX.Waypoint>} value
 * @return {!proto.eGPX.TrackSegment} returns this
*/
proto.eGPX.TrackSegment.prototype.setTrkptList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.eGPX.Waypoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.eGPX.Waypoint}
 */
proto.eGPX.TrackSegment.prototype.addTrkpt = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.eGPX.Waypoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.eGPX.TrackSegment} returns this
 */
proto.eGPX.TrackSegment.prototype.clearTrkptList = function() {
  return this.setTrkptList([]);
};


/**
 * map<string, google.protobuf.Any> extensions = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.google.protobuf.Any>}
 */
proto.eGPX.TrackSegment.prototype.getExtensionsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.google.protobuf.Any>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.google.protobuf.Any));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.eGPX.TrackSegment} returns this
 */
proto.eGPX.TrackSegment.prototype.clearExtensionsMap = function() {
  this.getExtensionsMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eGPX.Elevation.prototype.toObject = function(opt_includeInstance) {
  return proto.eGPX.Elevation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eGPX.Elevation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eGPX.Elevation.toObject = function(includeInstance, msg) {
  var f, obj = {
    max: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    min: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    pos: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    neg: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    avg: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eGPX.Elevation}
 */
proto.eGPX.Elevation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eGPX.Elevation;
  return proto.eGPX.Elevation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eGPX.Elevation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eGPX.Elevation}
 */
proto.eGPX.Elevation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMax(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMin(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPos(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setNeg(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAvg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eGPX.Elevation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eGPX.Elevation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eGPX.Elevation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eGPX.Elevation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMax();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getMin();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getPos();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getNeg();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getAvg();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
};


/**
 * optional float max = 1;
 * @return {number}
 */
proto.eGPX.Elevation.prototype.getMax = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.eGPX.Elevation} returns this
 */
proto.eGPX.Elevation.prototype.setMax = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float min = 2;
 * @return {number}
 */
proto.eGPX.Elevation.prototype.getMin = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.eGPX.Elevation} returns this
 */
proto.eGPX.Elevation.prototype.setMin = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float pos = 3;
 * @return {number}
 */
proto.eGPX.Elevation.prototype.getPos = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.eGPX.Elevation} returns this
 */
proto.eGPX.Elevation.prototype.setPos = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float neg = 4;
 * @return {number}
 */
proto.eGPX.Elevation.prototype.getNeg = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.eGPX.Elevation} returns this
 */
proto.eGPX.Elevation.prototype.setNeg = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float avg = 5;
 * @return {number}
 */
proto.eGPX.Elevation.prototype.getAvg = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.eGPX.Elevation} returns this
 */
proto.eGPX.Elevation.prototype.setAvg = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eGPX.Distance.prototype.toObject = function(opt_includeInstance) {
  return proto.eGPX.Distance.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eGPX.Distance} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eGPX.Distance.toObject = function(includeInstance, msg) {
  var f, obj = {
    total: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    cumul: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eGPX.Distance}
 */
proto.eGPX.Distance.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eGPX.Distance;
  return proto.eGPX.Distance.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eGPX.Distance} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eGPX.Distance}
 */
proto.eGPX.Distance.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTotal(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCumul(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eGPX.Distance.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eGPX.Distance.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eGPX.Distance} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eGPX.Distance.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotal();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getCumul();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional float total = 1;
 * @return {number}
 */
proto.eGPX.Distance.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.eGPX.Distance} returns this
 */
proto.eGPX.Distance.prototype.setTotal = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float cumul = 2;
 * @return {number}
 */
proto.eGPX.Distance.prototype.getCumul = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.eGPX.Distance} returns this
 */
proto.eGPX.Distance.prototype.setCumul = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eGPX.Point.prototype.toObject = function(opt_includeInstance) {
  return proto.eGPX.Point.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eGPX.Point} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eGPX.Point.toObject = function(includeInstance, msg) {
  var f, obj = {
    lat: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    lon: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    elevation: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    time: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eGPX.Point}
 */
proto.eGPX.Point.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eGPX.Point;
  return proto.eGPX.Point.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eGPX.Point} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eGPX.Point}
 */
proto.eGPX.Point.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLat(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLon(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setElevation(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eGPX.Point.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eGPX.Point.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eGPX.Point} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eGPX.Point.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLat();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getLon();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getElevation();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getTime();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional float lat = 1;
 * @return {number}
 */
proto.eGPX.Point.prototype.getLat = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.eGPX.Point} returns this
 */
proto.eGPX.Point.prototype.setLat = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float lon = 2;
 * @return {number}
 */
proto.eGPX.Point.prototype.getLon = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.eGPX.Point} returns this
 */
proto.eGPX.Point.prototype.setLon = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float elevation = 3;
 * @return {number}
 */
proto.eGPX.Point.prototype.getElevation = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.eGPX.Point} returns this
 */
proto.eGPX.Point.prototype.setElevation = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional int64 time = 4;
 * @return {number}
 */
proto.eGPX.Point.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.eGPX.Point} returns this
 */
proto.eGPX.Point.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.eGPX.Metadata.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eGPX.Metadata.prototype.toObject = function(opt_includeInstance) {
  return proto.eGPX.Metadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eGPX.Metadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eGPX.Metadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    desc: jspb.Message.getFieldWithDefault(msg, 2, ""),
    linkList: jspb.Message.toObjectList(msg.getLinkList(),
    proto.eGPX.Link.toObject, includeInstance),
    author: (f = msg.getAuthor()) && proto.eGPX.Author.toObject(includeInstance, f),
    time: jspb.Message.getFieldWithDefault(msg, 5, 0),
    copyright: (f = msg.getCopyright()) && proto.eGPX.Copyright.toObject(includeInstance, f),
    keywords: jspb.Message.getFieldWithDefault(msg, 7, ""),
    bounds: (f = msg.getBounds()) && proto.eGPX.Bounds.toObject(includeInstance, f),
    extensionsMap: (f = msg.getExtensionsMap()) ? f.toObject(includeInstance, proto.google.protobuf.Any.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eGPX.Metadata}
 */
proto.eGPX.Metadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eGPX.Metadata;
  return proto.eGPX.Metadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eGPX.Metadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eGPX.Metadata}
 */
proto.eGPX.Metadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDesc(value);
      break;
    case 3:
      var value = new proto.eGPX.Link;
      reader.readMessage(value,proto.eGPX.Link.deserializeBinaryFromReader);
      msg.addLink(value);
      break;
    case 4:
      var value = new proto.eGPX.Author;
      reader.readMessage(value,proto.eGPX.Author.deserializeBinaryFromReader);
      msg.setAuthor(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTime(value);
      break;
    case 6:
      var value = new proto.eGPX.Copyright;
      reader.readMessage(value,proto.eGPX.Copyright.deserializeBinaryFromReader);
      msg.setCopyright(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeywords(value);
      break;
    case 8:
      var value = new proto.eGPX.Bounds;
      reader.readMessage(value,proto.eGPX.Bounds.deserializeBinaryFromReader);
      msg.setBounds(value);
      break;
    case 9:
      var value = msg.getExtensionsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.google.protobuf.Any.deserializeBinaryFromReader, "", new proto.google.protobuf.Any());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eGPX.Metadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eGPX.Metadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eGPX.Metadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eGPX.Metadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDesc();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLinkList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.eGPX.Link.serializeBinaryToWriter
    );
  }
  f = message.getAuthor();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.eGPX.Author.serializeBinaryToWriter
    );
  }
  f = message.getTime();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getCopyright();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.eGPX.Copyright.serializeBinaryToWriter
    );
  }
  f = message.getKeywords();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getBounds();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.eGPX.Bounds.serializeBinaryToWriter
    );
  }
  f = message.getExtensionsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(9, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.google.protobuf.Any.serializeBinaryToWriter);
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.eGPX.Metadata.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.eGPX.Metadata} returns this
 */
proto.eGPX.Metadata.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string desc = 2;
 * @return {string}
 */
proto.eGPX.Metadata.prototype.getDesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.eGPX.Metadata} returns this
 */
proto.eGPX.Metadata.prototype.setDesc = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated Link link = 3;
 * @return {!Array<!proto.eGPX.Link>}
 */
proto.eGPX.Metadata.prototype.getLinkList = function() {
  return /** @type{!Array<!proto.eGPX.Link>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.eGPX.Link, 3));
};


/**
 * @param {!Array<!proto.eGPX.Link>} value
 * @return {!proto.eGPX.Metadata} returns this
*/
proto.eGPX.Metadata.prototype.setLinkList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.eGPX.Link=} opt_value
 * @param {number=} opt_index
 * @return {!proto.eGPX.Link}
 */
proto.eGPX.Metadata.prototype.addLink = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.eGPX.Link, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.eGPX.Metadata} returns this
 */
proto.eGPX.Metadata.prototype.clearLinkList = function() {
  return this.setLinkList([]);
};


/**
 * optional Author author = 4;
 * @return {?proto.eGPX.Author}
 */
proto.eGPX.Metadata.prototype.getAuthor = function() {
  return /** @type{?proto.eGPX.Author} */ (
    jspb.Message.getWrapperField(this, proto.eGPX.Author, 4));
};


/**
 * @param {?proto.eGPX.Author|undefined} value
 * @return {!proto.eGPX.Metadata} returns this
*/
proto.eGPX.Metadata.prototype.setAuthor = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.eGPX.Metadata} returns this
 */
proto.eGPX.Metadata.prototype.clearAuthor = function() {
  return this.setAuthor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.eGPX.Metadata.prototype.hasAuthor = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int64 time = 5;
 * @return {number}
 */
proto.eGPX.Metadata.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.eGPX.Metadata} returns this
 */
proto.eGPX.Metadata.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional Copyright copyright = 6;
 * @return {?proto.eGPX.Copyright}
 */
proto.eGPX.Metadata.prototype.getCopyright = function() {
  return /** @type{?proto.eGPX.Copyright} */ (
    jspb.Message.getWrapperField(this, proto.eGPX.Copyright, 6));
};


/**
 * @param {?proto.eGPX.Copyright|undefined} value
 * @return {!proto.eGPX.Metadata} returns this
*/
proto.eGPX.Metadata.prototype.setCopyright = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.eGPX.Metadata} returns this
 */
proto.eGPX.Metadata.prototype.clearCopyright = function() {
  return this.setCopyright(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.eGPX.Metadata.prototype.hasCopyright = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string keywords = 7;
 * @return {string}
 */
proto.eGPX.Metadata.prototype.getKeywords = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.eGPX.Metadata} returns this
 */
proto.eGPX.Metadata.prototype.setKeywords = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional Bounds bounds = 8;
 * @return {?proto.eGPX.Bounds}
 */
proto.eGPX.Metadata.prototype.getBounds = function() {
  return /** @type{?proto.eGPX.Bounds} */ (
    jspb.Message.getWrapperField(this, proto.eGPX.Bounds, 8));
};


/**
 * @param {?proto.eGPX.Bounds|undefined} value
 * @return {!proto.eGPX.Metadata} returns this
*/
proto.eGPX.Metadata.prototype.setBounds = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.eGPX.Metadata} returns this
 */
proto.eGPX.Metadata.prototype.clearBounds = function() {
  return this.setBounds(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.eGPX.Metadata.prototype.hasBounds = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * map<string, google.protobuf.Any> extensions = 9;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.google.protobuf.Any>}
 */
proto.eGPX.Metadata.prototype.getExtensionsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.google.protobuf.Any>} */ (
      jspb.Message.getMapField(this, 9, opt_noLazyCreate,
      proto.google.protobuf.Any));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.eGPX.Metadata} returns this
 */
proto.eGPX.Metadata.prototype.clearExtensionsMap = function() {
  this.getExtensionsMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eGPX.Copyright.prototype.toObject = function(opt_includeInstance) {
  return proto.eGPX.Copyright.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eGPX.Copyright} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eGPX.Copyright.toObject = function(includeInstance, msg) {
  var f, obj = {
    year: jspb.Message.getFieldWithDefault(msg, 1, 0),
    license: jspb.Message.getFieldWithDefault(msg, 2, ""),
    author: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eGPX.Copyright}
 */
proto.eGPX.Copyright.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eGPX.Copyright;
  return proto.eGPX.Copyright.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eGPX.Copyright} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eGPX.Copyright}
 */
proto.eGPX.Copyright.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setYear(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLicense(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eGPX.Copyright.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eGPX.Copyright.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eGPX.Copyright} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eGPX.Copyright.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getYear();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getLicense();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAuthor();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int32 year = 1;
 * @return {number}
 */
proto.eGPX.Copyright.prototype.getYear = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.eGPX.Copyright} returns this
 */
proto.eGPX.Copyright.prototype.setYear = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string license = 2;
 * @return {string}
 */
proto.eGPX.Copyright.prototype.getLicense = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.eGPX.Copyright} returns this
 */
proto.eGPX.Copyright.prototype.setLicense = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string author = 3;
 * @return {string}
 */
proto.eGPX.Copyright.prototype.getAuthor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.eGPX.Copyright} returns this
 */
proto.eGPX.Copyright.prototype.setAuthor = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eGPX.Author.prototype.toObject = function(opt_includeInstance) {
  return proto.eGPX.Author.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eGPX.Author} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eGPX.Author.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    email: (f = msg.getEmail()) && proto.eGPX.Email.toObject(includeInstance, f),
    link: (f = msg.getLink()) && proto.eGPX.Link.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eGPX.Author}
 */
proto.eGPX.Author.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eGPX.Author;
  return proto.eGPX.Author.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eGPX.Author} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eGPX.Author}
 */
proto.eGPX.Author.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.eGPX.Email;
      reader.readMessage(value,proto.eGPX.Email.deserializeBinaryFromReader);
      msg.setEmail(value);
      break;
    case 3:
      var value = new proto.eGPX.Link;
      reader.readMessage(value,proto.eGPX.Link.deserializeBinaryFromReader);
      msg.setLink(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eGPX.Author.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eGPX.Author.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eGPX.Author} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eGPX.Author.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEmail();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.eGPX.Email.serializeBinaryToWriter
    );
  }
  f = message.getLink();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.eGPX.Link.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.eGPX.Author.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.eGPX.Author} returns this
 */
proto.eGPX.Author.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Email email = 2;
 * @return {?proto.eGPX.Email}
 */
proto.eGPX.Author.prototype.getEmail = function() {
  return /** @type{?proto.eGPX.Email} */ (
    jspb.Message.getWrapperField(this, proto.eGPX.Email, 2));
};


/**
 * @param {?proto.eGPX.Email|undefined} value
 * @return {!proto.eGPX.Author} returns this
*/
proto.eGPX.Author.prototype.setEmail = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.eGPX.Author} returns this
 */
proto.eGPX.Author.prototype.clearEmail = function() {
  return this.setEmail(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.eGPX.Author.prototype.hasEmail = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Link link = 3;
 * @return {?proto.eGPX.Link}
 */
proto.eGPX.Author.prototype.getLink = function() {
  return /** @type{?proto.eGPX.Link} */ (
    jspb.Message.getWrapperField(this, proto.eGPX.Link, 3));
};


/**
 * @param {?proto.eGPX.Link|undefined} value
 * @return {!proto.eGPX.Author} returns this
*/
proto.eGPX.Author.prototype.setLink = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.eGPX.Author} returns this
 */
proto.eGPX.Author.prototype.clearLink = function() {
  return this.setLink(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.eGPX.Author.prototype.hasLink = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eGPX.Email.prototype.toObject = function(opt_includeInstance) {
  return proto.eGPX.Email.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eGPX.Email} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eGPX.Email.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    domain: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eGPX.Email}
 */
proto.eGPX.Email.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eGPX.Email;
  return proto.eGPX.Email.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eGPX.Email} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eGPX.Email}
 */
proto.eGPX.Email.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDomain(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eGPX.Email.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eGPX.Email.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eGPX.Email} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eGPX.Email.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDomain();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.eGPX.Email.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.eGPX.Email} returns this
 */
proto.eGPX.Email.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string domain = 2;
 * @return {string}
 */
proto.eGPX.Email.prototype.getDomain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.eGPX.Email} returns this
 */
proto.eGPX.Email.prototype.setDomain = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eGPX.Bounds.prototype.toObject = function(opt_includeInstance) {
  return proto.eGPX.Bounds.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eGPX.Bounds} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eGPX.Bounds.toObject = function(includeInstance, msg) {
  var f, obj = {
    minlat: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    minlon: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    maxlat: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    maxlon: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eGPX.Bounds}
 */
proto.eGPX.Bounds.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eGPX.Bounds;
  return proto.eGPX.Bounds.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eGPX.Bounds} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eGPX.Bounds}
 */
proto.eGPX.Bounds.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMinlat(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMinlon(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMaxlat(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMaxlon(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eGPX.Bounds.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eGPX.Bounds.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eGPX.Bounds} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eGPX.Bounds.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMinlat();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getMinlon();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getMaxlat();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getMaxlon();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional float minlat = 1;
 * @return {number}
 */
proto.eGPX.Bounds.prototype.getMinlat = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.eGPX.Bounds} returns this
 */
proto.eGPX.Bounds.prototype.setMinlat = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float minlon = 2;
 * @return {number}
 */
proto.eGPX.Bounds.prototype.getMinlon = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.eGPX.Bounds} returns this
 */
proto.eGPX.Bounds.prototype.setMinlon = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float maxlat = 3;
 * @return {number}
 */
proto.eGPX.Bounds.prototype.getMaxlat = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.eGPX.Bounds} returns this
 */
proto.eGPX.Bounds.prototype.setMaxlat = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float maxlon = 4;
 * @return {number}
 */
proto.eGPX.Bounds.prototype.getMaxlon = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.eGPX.Bounds} returns this
 */
proto.eGPX.Bounds.prototype.setMaxlon = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


