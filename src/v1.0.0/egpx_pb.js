// source: src/egpx.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.exportSymbol('proto.eGPX.Author', null, global);
goog.exportSymbol('proto.eGPX.Distance', null, global);
goog.exportSymbol('proto.eGPX.Elevation', null, global);
goog.exportSymbol('proto.eGPX.File', null, global);
goog.exportSymbol('proto.eGPX.Link', null, global);
goog.exportSymbol('proto.eGPX.Metadata', null, global);
goog.exportSymbol('proto.eGPX.Point', null, global);
goog.exportSymbol('proto.eGPX.Route', null, global);
goog.exportSymbol('proto.eGPX.Track', null, global);
goog.exportSymbol('proto.eGPX.Waypoint', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eGPX.File = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.eGPX.File.repeatedFields_, null);
};
goog.inherits(proto.eGPX.File, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eGPX.File.displayName = 'proto.eGPX.File';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eGPX.Route = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.eGPX.Route.repeatedFields_, null);
};
goog.inherits(proto.eGPX.Route, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eGPX.Route.displayName = 'proto.eGPX.Route';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eGPX.Track = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.eGPX.Track.repeatedFields_, null);
};
goog.inherits(proto.eGPX.Track, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eGPX.Track.displayName = 'proto.eGPX.Track';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eGPX.Elevation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.eGPX.Elevation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eGPX.Elevation.displayName = 'proto.eGPX.Elevation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eGPX.Distance = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.eGPX.Distance, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eGPX.Distance.displayName = 'proto.eGPX.Distance';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eGPX.Point = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.eGPX.Point, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eGPX.Point.displayName = 'proto.eGPX.Point';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eGPX.Waypoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.eGPX.Waypoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eGPX.Waypoint.displayName = 'proto.eGPX.Waypoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eGPX.Metadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.eGPX.Metadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eGPX.Metadata.displayName = 'proto.eGPX.Metadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eGPX.Author = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.eGPX.Author, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eGPX.Author.displayName = 'proto.eGPX.Author';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.eGPX.Link = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.eGPX.Link, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.eGPX.Link.displayName = 'proto.eGPX.Link';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.eGPX.File.repeatedFields_ = [3,4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eGPX.File.prototype.toObject = function(opt_includeInstance) {
  return proto.eGPX.File.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eGPX.File} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eGPX.File.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, 0),
    metadata: (f = msg.getMetadata()) && proto.eGPX.Metadata.toObject(includeInstance, f),
    waypointsList: jspb.Message.toObjectList(msg.getWaypointsList(),
    proto.eGPX.Waypoint.toObject, includeInstance),
    tracksList: jspb.Message.toObjectList(msg.getTracksList(),
    proto.eGPX.Track.toObject, includeInstance),
    routesList: jspb.Message.toObjectList(msg.getRoutesList(),
    proto.eGPX.Route.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eGPX.File}
 */
proto.eGPX.File.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eGPX.File;
  return proto.eGPX.File.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eGPX.File} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eGPX.File}
 */
proto.eGPX.File.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersion(value);
      break;
    case 2:
      var value = new proto.eGPX.Metadata;
      reader.readMessage(value,proto.eGPX.Metadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 3:
      var value = new proto.eGPX.Waypoint;
      reader.readMessage(value,proto.eGPX.Waypoint.deserializeBinaryFromReader);
      msg.addWaypoints(value);
      break;
    case 4:
      var value = new proto.eGPX.Track;
      reader.readMessage(value,proto.eGPX.Track.deserializeBinaryFromReader);
      msg.addTracks(value);
      break;
    case 5:
      var value = new proto.eGPX.Route;
      reader.readMessage(value,proto.eGPX.Route.deserializeBinaryFromReader);
      msg.addRoutes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eGPX.File.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eGPX.File.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eGPX.File} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eGPX.File.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.eGPX.Metadata.serializeBinaryToWriter
    );
  }
  f = message.getWaypointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.eGPX.Waypoint.serializeBinaryToWriter
    );
  }
  f = message.getTracksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.eGPX.Track.serializeBinaryToWriter
    );
  }
  f = message.getRoutesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.eGPX.Route.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 version = 1;
 * @return {number}
 */
proto.eGPX.File.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.eGPX.File} returns this
 */
proto.eGPX.File.prototype.setVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Metadata metadata = 2;
 * @return {?proto.eGPX.Metadata}
 */
proto.eGPX.File.prototype.getMetadata = function() {
  return /** @type{?proto.eGPX.Metadata} */ (
    jspb.Message.getWrapperField(this, proto.eGPX.Metadata, 2));
};


/**
 * @param {?proto.eGPX.Metadata|undefined} value
 * @return {!proto.eGPX.File} returns this
*/
proto.eGPX.File.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.eGPX.File} returns this
 */
proto.eGPX.File.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.eGPX.File.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Waypoint waypoints = 3;
 * @return {!Array<!proto.eGPX.Waypoint>}
 */
proto.eGPX.File.prototype.getWaypointsList = function() {
  return /** @type{!Array<!proto.eGPX.Waypoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.eGPX.Waypoint, 3));
};


/**
 * @param {!Array<!proto.eGPX.Waypoint>} value
 * @return {!proto.eGPX.File} returns this
*/
proto.eGPX.File.prototype.setWaypointsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.eGPX.Waypoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.eGPX.Waypoint}
 */
proto.eGPX.File.prototype.addWaypoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.eGPX.Waypoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.eGPX.File} returns this
 */
proto.eGPX.File.prototype.clearWaypointsList = function() {
  return this.setWaypointsList([]);
};


/**
 * repeated Track tracks = 4;
 * @return {!Array<!proto.eGPX.Track>}
 */
proto.eGPX.File.prototype.getTracksList = function() {
  return /** @type{!Array<!proto.eGPX.Track>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.eGPX.Track, 4));
};


/**
 * @param {!Array<!proto.eGPX.Track>} value
 * @return {!proto.eGPX.File} returns this
*/
proto.eGPX.File.prototype.setTracksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.eGPX.Track=} opt_value
 * @param {number=} opt_index
 * @return {!proto.eGPX.Track}
 */
proto.eGPX.File.prototype.addTracks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.eGPX.Track, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.eGPX.File} returns this
 */
proto.eGPX.File.prototype.clearTracksList = function() {
  return this.setTracksList([]);
};


/**
 * repeated Route routes = 5;
 * @return {!Array<!proto.eGPX.Route>}
 */
proto.eGPX.File.prototype.getRoutesList = function() {
  return /** @type{!Array<!proto.eGPX.Route>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.eGPX.Route, 5));
};


/**
 * @param {!Array<!proto.eGPX.Route>} value
 * @return {!proto.eGPX.File} returns this
*/
proto.eGPX.File.prototype.setRoutesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.eGPX.Route=} opt_value
 * @param {number=} opt_index
 * @return {!proto.eGPX.Route}
 */
proto.eGPX.File.prototype.addRoutes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.eGPX.Route, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.eGPX.File} returns this
 */
proto.eGPX.File.prototype.clearRoutesList = function() {
  return this.setRoutesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.eGPX.Route.repeatedFields_ = [8,11];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eGPX.Route.prototype.toObject = function(opt_includeInstance) {
  return proto.eGPX.Route.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eGPX.Route} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eGPX.Route.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    comment: jspb.Message.getFieldWithDefault(msg, 2, ""),
    desc: jspb.Message.getFieldWithDefault(msg, 3, ""),
    src: jspb.Message.getFieldWithDefault(msg, 4, ""),
    id: jspb.Message.getFieldWithDefault(msg, 5, ""),
    link: jspb.Message.getFieldWithDefault(msg, 6, ""),
    type: jspb.Message.getFieldWithDefault(msg, 7, ""),
    pointsList: jspb.Message.toObjectList(msg.getPointsList(),
    proto.eGPX.Point.toObject, includeInstance),
    distance: (f = msg.getDistance()) && proto.eGPX.Distance.toObject(includeInstance, f),
    elevation: (f = msg.getElevation()) && proto.eGPX.Elevation.toObject(includeInstance, f),
    slopesList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 11)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eGPX.Route}
 */
proto.eGPX.Route.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eGPX.Route;
  return proto.eGPX.Route.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eGPX.Route} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eGPX.Route}
 */
proto.eGPX.Route.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setComment(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDesc(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSrc(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setLink(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 8:
      var value = new proto.eGPX.Point;
      reader.readMessage(value,proto.eGPX.Point.deserializeBinaryFromReader);
      msg.addPoints(value);
      break;
    case 9:
      var value = new proto.eGPX.Distance;
      reader.readMessage(value,proto.eGPX.Distance.deserializeBinaryFromReader);
      msg.setDistance(value);
      break;
    case 10:
      var value = new proto.eGPX.Elevation;
      reader.readMessage(value,proto.eGPX.Elevation.deserializeBinaryFromReader);
      msg.setElevation(value);
      break;
    case 11:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setSlopesList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eGPX.Route.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eGPX.Route.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eGPX.Route} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eGPX.Route.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getComment();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDesc();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSrc();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getLink();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getPointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.eGPX.Point.serializeBinaryToWriter
    );
  }
  f = message.getDistance();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.eGPX.Distance.serializeBinaryToWriter
    );
  }
  f = message.getElevation();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.eGPX.Elevation.serializeBinaryToWriter
    );
  }
  f = message.getSlopesList();
  if (f.length > 0) {
    writer.writePackedFloat(
      11,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.eGPX.Route.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.eGPX.Route} returns this
 */
proto.eGPX.Route.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string comment = 2;
 * @return {string}
 */
proto.eGPX.Route.prototype.getComment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.eGPX.Route} returns this
 */
proto.eGPX.Route.prototype.setComment = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string desc = 3;
 * @return {string}
 */
proto.eGPX.Route.prototype.getDesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.eGPX.Route} returns this
 */
proto.eGPX.Route.prototype.setDesc = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string src = 4;
 * @return {string}
 */
proto.eGPX.Route.prototype.getSrc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.eGPX.Route} returns this
 */
proto.eGPX.Route.prototype.setSrc = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string id = 5;
 * @return {string}
 */
proto.eGPX.Route.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.eGPX.Route} returns this
 */
proto.eGPX.Route.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string link = 6;
 * @return {string}
 */
proto.eGPX.Route.prototype.getLink = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.eGPX.Route} returns this
 */
proto.eGPX.Route.prototype.setLink = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string type = 7;
 * @return {string}
 */
proto.eGPX.Route.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.eGPX.Route} returns this
 */
proto.eGPX.Route.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * repeated Point points = 8;
 * @return {!Array<!proto.eGPX.Point>}
 */
proto.eGPX.Route.prototype.getPointsList = function() {
  return /** @type{!Array<!proto.eGPX.Point>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.eGPX.Point, 8));
};


/**
 * @param {!Array<!proto.eGPX.Point>} value
 * @return {!proto.eGPX.Route} returns this
*/
proto.eGPX.Route.prototype.setPointsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.eGPX.Point=} opt_value
 * @param {number=} opt_index
 * @return {!proto.eGPX.Point}
 */
proto.eGPX.Route.prototype.addPoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.eGPX.Point, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.eGPX.Route} returns this
 */
proto.eGPX.Route.prototype.clearPointsList = function() {
  return this.setPointsList([]);
};


/**
 * optional Distance distance = 9;
 * @return {?proto.eGPX.Distance}
 */
proto.eGPX.Route.prototype.getDistance = function() {
  return /** @type{?proto.eGPX.Distance} */ (
    jspb.Message.getWrapperField(this, proto.eGPX.Distance, 9));
};


/**
 * @param {?proto.eGPX.Distance|undefined} value
 * @return {!proto.eGPX.Route} returns this
*/
proto.eGPX.Route.prototype.setDistance = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.eGPX.Route} returns this
 */
proto.eGPX.Route.prototype.clearDistance = function() {
  return this.setDistance(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.eGPX.Route.prototype.hasDistance = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional Elevation elevation = 10;
 * @return {?proto.eGPX.Elevation}
 */
proto.eGPX.Route.prototype.getElevation = function() {
  return /** @type{?proto.eGPX.Elevation} */ (
    jspb.Message.getWrapperField(this, proto.eGPX.Elevation, 10));
};


/**
 * @param {?proto.eGPX.Elevation|undefined} value
 * @return {!proto.eGPX.Route} returns this
*/
proto.eGPX.Route.prototype.setElevation = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.eGPX.Route} returns this
 */
proto.eGPX.Route.prototype.clearElevation = function() {
  return this.setElevation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.eGPX.Route.prototype.hasElevation = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * repeated float slopes = 11;
 * @return {!Array<number>}
 */
proto.eGPX.Route.prototype.getSlopesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 11));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.eGPX.Route} returns this
 */
proto.eGPX.Route.prototype.setSlopesList = function(value) {
  return jspb.Message.setField(this, 11, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.eGPX.Route} returns this
 */
proto.eGPX.Route.prototype.addSlopes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 11, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.eGPX.Route} returns this
 */
proto.eGPX.Route.prototype.clearSlopesList = function() {
  return this.setSlopesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.eGPX.Track.repeatedFields_ = [8,11];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eGPX.Track.prototype.toObject = function(opt_includeInstance) {
  return proto.eGPX.Track.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eGPX.Track} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eGPX.Track.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    comment: jspb.Message.getFieldWithDefault(msg, 2, ""),
    desc: jspb.Message.getFieldWithDefault(msg, 3, ""),
    src: jspb.Message.getFieldWithDefault(msg, 4, ""),
    id: jspb.Message.getFieldWithDefault(msg, 5, ""),
    link: jspb.Message.getFieldWithDefault(msg, 6, ""),
    type: jspb.Message.getFieldWithDefault(msg, 7, ""),
    pointsList: jspb.Message.toObjectList(msg.getPointsList(),
    proto.eGPX.Point.toObject, includeInstance),
    distance: (f = msg.getDistance()) && proto.eGPX.Distance.toObject(includeInstance, f),
    elevation: (f = msg.getElevation()) && proto.eGPX.Elevation.toObject(includeInstance, f),
    slopesList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 11)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eGPX.Track}
 */
proto.eGPX.Track.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eGPX.Track;
  return proto.eGPX.Track.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eGPX.Track} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eGPX.Track}
 */
proto.eGPX.Track.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setComment(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDesc(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSrc(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setLink(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 8:
      var value = new proto.eGPX.Point;
      reader.readMessage(value,proto.eGPX.Point.deserializeBinaryFromReader);
      msg.addPoints(value);
      break;
    case 9:
      var value = new proto.eGPX.Distance;
      reader.readMessage(value,proto.eGPX.Distance.deserializeBinaryFromReader);
      msg.setDistance(value);
      break;
    case 10:
      var value = new proto.eGPX.Elevation;
      reader.readMessage(value,proto.eGPX.Elevation.deserializeBinaryFromReader);
      msg.setElevation(value);
      break;
    case 11:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setSlopesList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eGPX.Track.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eGPX.Track.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eGPX.Track} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eGPX.Track.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getComment();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDesc();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSrc();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getLink();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getPointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.eGPX.Point.serializeBinaryToWriter
    );
  }
  f = message.getDistance();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.eGPX.Distance.serializeBinaryToWriter
    );
  }
  f = message.getElevation();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.eGPX.Elevation.serializeBinaryToWriter
    );
  }
  f = message.getSlopesList();
  if (f.length > 0) {
    writer.writePackedFloat(
      11,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.eGPX.Track.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.eGPX.Track} returns this
 */
proto.eGPX.Track.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string comment = 2;
 * @return {string}
 */
proto.eGPX.Track.prototype.getComment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.eGPX.Track} returns this
 */
proto.eGPX.Track.prototype.setComment = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string desc = 3;
 * @return {string}
 */
proto.eGPX.Track.prototype.getDesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.eGPX.Track} returns this
 */
proto.eGPX.Track.prototype.setDesc = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string src = 4;
 * @return {string}
 */
proto.eGPX.Track.prototype.getSrc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.eGPX.Track} returns this
 */
proto.eGPX.Track.prototype.setSrc = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string id = 5;
 * @return {string}
 */
proto.eGPX.Track.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.eGPX.Track} returns this
 */
proto.eGPX.Track.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string link = 6;
 * @return {string}
 */
proto.eGPX.Track.prototype.getLink = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.eGPX.Track} returns this
 */
proto.eGPX.Track.prototype.setLink = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string type = 7;
 * @return {string}
 */
proto.eGPX.Track.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.eGPX.Track} returns this
 */
proto.eGPX.Track.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * repeated Point points = 8;
 * @return {!Array<!proto.eGPX.Point>}
 */
proto.eGPX.Track.prototype.getPointsList = function() {
  return /** @type{!Array<!proto.eGPX.Point>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.eGPX.Point, 8));
};


/**
 * @param {!Array<!proto.eGPX.Point>} value
 * @return {!proto.eGPX.Track} returns this
*/
proto.eGPX.Track.prototype.setPointsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.eGPX.Point=} opt_value
 * @param {number=} opt_index
 * @return {!proto.eGPX.Point}
 */
proto.eGPX.Track.prototype.addPoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.eGPX.Point, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.eGPX.Track} returns this
 */
proto.eGPX.Track.prototype.clearPointsList = function() {
  return this.setPointsList([]);
};


/**
 * optional Distance distance = 9;
 * @return {?proto.eGPX.Distance}
 */
proto.eGPX.Track.prototype.getDistance = function() {
  return /** @type{?proto.eGPX.Distance} */ (
    jspb.Message.getWrapperField(this, proto.eGPX.Distance, 9));
};


/**
 * @param {?proto.eGPX.Distance|undefined} value
 * @return {!proto.eGPX.Track} returns this
*/
proto.eGPX.Track.prototype.setDistance = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.eGPX.Track} returns this
 */
proto.eGPX.Track.prototype.clearDistance = function() {
  return this.setDistance(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.eGPX.Track.prototype.hasDistance = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional Elevation elevation = 10;
 * @return {?proto.eGPX.Elevation}
 */
proto.eGPX.Track.prototype.getElevation = function() {
  return /** @type{?proto.eGPX.Elevation} */ (
    jspb.Message.getWrapperField(this, proto.eGPX.Elevation, 10));
};


/**
 * @param {?proto.eGPX.Elevation|undefined} value
 * @return {!proto.eGPX.Track} returns this
*/
proto.eGPX.Track.prototype.setElevation = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.eGPX.Track} returns this
 */
proto.eGPX.Track.prototype.clearElevation = function() {
  return this.setElevation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.eGPX.Track.prototype.hasElevation = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * repeated float slopes = 11;
 * @return {!Array<number>}
 */
proto.eGPX.Track.prototype.getSlopesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 11));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.eGPX.Track} returns this
 */
proto.eGPX.Track.prototype.setSlopesList = function(value) {
  return jspb.Message.setField(this, 11, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.eGPX.Track} returns this
 */
proto.eGPX.Track.prototype.addSlopes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 11, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.eGPX.Track} returns this
 */
proto.eGPX.Track.prototype.clearSlopesList = function() {
  return this.setSlopesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eGPX.Elevation.prototype.toObject = function(opt_includeInstance) {
  return proto.eGPX.Elevation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eGPX.Elevation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eGPX.Elevation.toObject = function(includeInstance, msg) {
  var f, obj = {
    max: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    min: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    pos: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    neg: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    avg: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eGPX.Elevation}
 */
proto.eGPX.Elevation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eGPX.Elevation;
  return proto.eGPX.Elevation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eGPX.Elevation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eGPX.Elevation}
 */
proto.eGPX.Elevation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMax(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMin(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPos(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setNeg(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAvg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eGPX.Elevation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eGPX.Elevation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eGPX.Elevation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eGPX.Elevation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMax();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getMin();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getPos();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getNeg();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getAvg();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
};


/**
 * optional float max = 1;
 * @return {number}
 */
proto.eGPX.Elevation.prototype.getMax = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.eGPX.Elevation} returns this
 */
proto.eGPX.Elevation.prototype.setMax = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float min = 2;
 * @return {number}
 */
proto.eGPX.Elevation.prototype.getMin = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.eGPX.Elevation} returns this
 */
proto.eGPX.Elevation.prototype.setMin = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float pos = 3;
 * @return {number}
 */
proto.eGPX.Elevation.prototype.getPos = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.eGPX.Elevation} returns this
 */
proto.eGPX.Elevation.prototype.setPos = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float neg = 4;
 * @return {number}
 */
proto.eGPX.Elevation.prototype.getNeg = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.eGPX.Elevation} returns this
 */
proto.eGPX.Elevation.prototype.setNeg = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float avg = 5;
 * @return {number}
 */
proto.eGPX.Elevation.prototype.getAvg = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.eGPX.Elevation} returns this
 */
proto.eGPX.Elevation.prototype.setAvg = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eGPX.Distance.prototype.toObject = function(opt_includeInstance) {
  return proto.eGPX.Distance.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eGPX.Distance} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eGPX.Distance.toObject = function(includeInstance, msg) {
  var f, obj = {
    total: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    cumul: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eGPX.Distance}
 */
proto.eGPX.Distance.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eGPX.Distance;
  return proto.eGPX.Distance.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eGPX.Distance} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eGPX.Distance}
 */
proto.eGPX.Distance.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTotal(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCumul(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eGPX.Distance.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eGPX.Distance.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eGPX.Distance} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eGPX.Distance.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotal();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getCumul();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional float total = 1;
 * @return {number}
 */
proto.eGPX.Distance.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.eGPX.Distance} returns this
 */
proto.eGPX.Distance.prototype.setTotal = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float cumul = 2;
 * @return {number}
 */
proto.eGPX.Distance.prototype.getCumul = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.eGPX.Distance} returns this
 */
proto.eGPX.Distance.prototype.setCumul = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eGPX.Point.prototype.toObject = function(opt_includeInstance) {
  return proto.eGPX.Point.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eGPX.Point} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eGPX.Point.toObject = function(includeInstance, msg) {
  var f, obj = {
    lat: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    lon: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    elevation: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    time: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eGPX.Point}
 */
proto.eGPX.Point.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eGPX.Point;
  return proto.eGPX.Point.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eGPX.Point} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eGPX.Point}
 */
proto.eGPX.Point.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLat(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLon(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setElevation(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eGPX.Point.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eGPX.Point.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eGPX.Point} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eGPX.Point.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLat();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getLon();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getElevation();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getTime();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional float lat = 1;
 * @return {number}
 */
proto.eGPX.Point.prototype.getLat = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.eGPX.Point} returns this
 */
proto.eGPX.Point.prototype.setLat = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float lon = 2;
 * @return {number}
 */
proto.eGPX.Point.prototype.getLon = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.eGPX.Point} returns this
 */
proto.eGPX.Point.prototype.setLon = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float elevation = 3;
 * @return {number}
 */
proto.eGPX.Point.prototype.getElevation = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.eGPX.Point} returns this
 */
proto.eGPX.Point.prototype.setElevation = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional int64 time = 4;
 * @return {number}
 */
proto.eGPX.Point.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.eGPX.Point} returns this
 */
proto.eGPX.Point.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eGPX.Waypoint.prototype.toObject = function(opt_includeInstance) {
  return proto.eGPX.Waypoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eGPX.Waypoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eGPX.Waypoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    comment: jspb.Message.getFieldWithDefault(msg, 2, ""),
    desc: jspb.Message.getFieldWithDefault(msg, 3, ""),
    lat: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    lon: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    elevation: jspb.Message.getFieldWithDefault(msg, 6, 0),
    time: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eGPX.Waypoint}
 */
proto.eGPX.Waypoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eGPX.Waypoint;
  return proto.eGPX.Waypoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eGPX.Waypoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eGPX.Waypoint}
 */
proto.eGPX.Waypoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setComment(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDesc(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLat(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLon(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setElevation(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eGPX.Waypoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eGPX.Waypoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eGPX.Waypoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eGPX.Waypoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getComment();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDesc();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLat();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getLon();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getElevation();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getTime();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.eGPX.Waypoint.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.eGPX.Waypoint} returns this
 */
proto.eGPX.Waypoint.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string comment = 2;
 * @return {string}
 */
proto.eGPX.Waypoint.prototype.getComment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.eGPX.Waypoint} returns this
 */
proto.eGPX.Waypoint.prototype.setComment = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string desc = 3;
 * @return {string}
 */
proto.eGPX.Waypoint.prototype.getDesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.eGPX.Waypoint} returns this
 */
proto.eGPX.Waypoint.prototype.setDesc = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional float lat = 4;
 * @return {number}
 */
proto.eGPX.Waypoint.prototype.getLat = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.eGPX.Waypoint} returns this
 */
proto.eGPX.Waypoint.prototype.setLat = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float lon = 5;
 * @return {number}
 */
proto.eGPX.Waypoint.prototype.getLon = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.eGPX.Waypoint} returns this
 */
proto.eGPX.Waypoint.prototype.setLon = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional int32 elevation = 6;
 * @return {number}
 */
proto.eGPX.Waypoint.prototype.getElevation = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.eGPX.Waypoint} returns this
 */
proto.eGPX.Waypoint.prototype.setElevation = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 time = 7;
 * @return {number}
 */
proto.eGPX.Waypoint.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.eGPX.Waypoint} returns this
 */
proto.eGPX.Waypoint.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eGPX.Metadata.prototype.toObject = function(opt_includeInstance) {
  return proto.eGPX.Metadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eGPX.Metadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eGPX.Metadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    desc: jspb.Message.getFieldWithDefault(msg, 2, ""),
    link: jspb.Message.getFieldWithDefault(msg, 3, ""),
    author: (f = msg.getAuthor()) && proto.eGPX.Author.toObject(includeInstance, f),
    time: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eGPX.Metadata}
 */
proto.eGPX.Metadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eGPX.Metadata;
  return proto.eGPX.Metadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eGPX.Metadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eGPX.Metadata}
 */
proto.eGPX.Metadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDesc(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLink(value);
      break;
    case 4:
      var value = new proto.eGPX.Author;
      reader.readMessage(value,proto.eGPX.Author.deserializeBinaryFromReader);
      msg.setAuthor(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eGPX.Metadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eGPX.Metadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eGPX.Metadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eGPX.Metadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDesc();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLink();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAuthor();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.eGPX.Author.serializeBinaryToWriter
    );
  }
  f = message.getTime();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.eGPX.Metadata.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.eGPX.Metadata} returns this
 */
proto.eGPX.Metadata.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string desc = 2;
 * @return {string}
 */
proto.eGPX.Metadata.prototype.getDesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.eGPX.Metadata} returns this
 */
proto.eGPX.Metadata.prototype.setDesc = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string link = 3;
 * @return {string}
 */
proto.eGPX.Metadata.prototype.getLink = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.eGPX.Metadata} returns this
 */
proto.eGPX.Metadata.prototype.setLink = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Author author = 4;
 * @return {?proto.eGPX.Author}
 */
proto.eGPX.Metadata.prototype.getAuthor = function() {
  return /** @type{?proto.eGPX.Author} */ (
    jspb.Message.getWrapperField(this, proto.eGPX.Author, 4));
};


/**
 * @param {?proto.eGPX.Author|undefined} value
 * @return {!proto.eGPX.Metadata} returns this
*/
proto.eGPX.Metadata.prototype.setAuthor = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.eGPX.Metadata} returns this
 */
proto.eGPX.Metadata.prototype.clearAuthor = function() {
  return this.setAuthor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.eGPX.Metadata.prototype.hasAuthor = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int64 time = 5;
 * @return {number}
 */
proto.eGPX.Metadata.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.eGPX.Metadata} returns this
 */
proto.eGPX.Metadata.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eGPX.Author.prototype.toObject = function(opt_includeInstance) {
  return proto.eGPX.Author.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eGPX.Author} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eGPX.Author.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    email: jspb.Message.getFieldWithDefault(msg, 2, ""),
    link: (f = msg.getLink()) && proto.eGPX.Link.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eGPX.Author}
 */
proto.eGPX.Author.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eGPX.Author;
  return proto.eGPX.Author.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eGPX.Author} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eGPX.Author}
 */
proto.eGPX.Author.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 3:
      var value = new proto.eGPX.Link;
      reader.readMessage(value,proto.eGPX.Link.deserializeBinaryFromReader);
      msg.setLink(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eGPX.Author.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eGPX.Author.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eGPX.Author} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eGPX.Author.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLink();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.eGPX.Link.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.eGPX.Author.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.eGPX.Author} returns this
 */
proto.eGPX.Author.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string email = 2;
 * @return {string}
 */
proto.eGPX.Author.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.eGPX.Author} returns this
 */
proto.eGPX.Author.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Link link = 3;
 * @return {?proto.eGPX.Link}
 */
proto.eGPX.Author.prototype.getLink = function() {
  return /** @type{?proto.eGPX.Link} */ (
    jspb.Message.getWrapperField(this, proto.eGPX.Link, 3));
};


/**
 * @param {?proto.eGPX.Link|undefined} value
 * @return {!proto.eGPX.Author} returns this
*/
proto.eGPX.Author.prototype.setLink = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.eGPX.Author} returns this
 */
proto.eGPX.Author.prototype.clearLink = function() {
  return this.setLink(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.eGPX.Author.prototype.hasLink = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.eGPX.Link.prototype.toObject = function(opt_includeInstance) {
  return proto.eGPX.Link.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.eGPX.Link} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eGPX.Link.toObject = function(includeInstance, msg) {
  var f, obj = {
    href: jspb.Message.getFieldWithDefault(msg, 1, ""),
    text: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.eGPX.Link}
 */
proto.eGPX.Link.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.eGPX.Link;
  return proto.eGPX.Link.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.eGPX.Link} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.eGPX.Link}
 */
proto.eGPX.Link.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHref(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.eGPX.Link.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.eGPX.Link.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.eGPX.Link} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.eGPX.Link.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHref();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string href = 1;
 * @return {string}
 */
proto.eGPX.Link.prototype.getHref = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.eGPX.Link} returns this
 */
proto.eGPX.Link.prototype.setHref = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string text = 2;
 * @return {string}
 */
proto.eGPX.Link.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.eGPX.Link} returns this
 */
proto.eGPX.Link.prototype.setText = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


